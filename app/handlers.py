from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from app.api_client import fetch_city_info
import app.keyboard as kb

router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_languages = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
@router.message(CommandStart())
async def cmd_start_ru(message: Message):
    user_languages[message.from_user.id] = "ru"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–∞—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.main_ru
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
@router.message(CommandStart())
async def cmd_start_en(message: Message):
    user_languages[message.from_user.id] = "en"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await message.answer(
        "Hello! I am a bot for getting information about cities. Choose an option:",
        reply_markup=kb.main_en
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "/–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥—É" –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
@router.message(F.text == "/–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥—É")
async def ask_city_name_ru(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "/City Information" –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
@router.message(F.text == "/City Information")
async def ask_city_name_en(message: Message):
    await message.answer("Enter the city name:")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
@router.message(F.text.regexp(r"^[–ê-–Ø–∞-—è\s\-]+$"))
async def get_city_info_ru(message: Message):
    city_name = message.text.strip()
    await message.answer(f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≥–æ—Ä–æ–¥—É: {city_name}...")

    city_info = await fetch_city_info(city_name)

    if isinstance(city_info, dict) and "name" in city_info:
        answer = (
            f"üåÜ –ì–æ—Ä–æ–¥: {city_info['name']}\n"
            f"üåç –°—Ç—Ä–∞–Ω–∞: {city_info['country']}\n"
            f"üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ: {city_info['population']}\n"
            f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {city_info['latitude']}, {city_info['longitude']}\n"
        )
        await message.answer(answer, reply_markup=kb.main_ru)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–µ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
@router.message(F.text.regexp(r"^[A-Za-z\s\-]+$"))
async def get_city_info_en(message: Message):
    city_name = message.text.strip()
    await message.answer(f"üîç I'm looking for information about the city: {city_name}...")

    city_info = await fetch_city_info(city_name)

    if isinstance(city_info, dict) and "name" in city_info:
        answer = (
            f"üåÜ City: {city_info['name']}\n"
            f"üåç Country: {city_info['country']}\n"
            f"üë• Population: {city_info['population']}\n"
            f"üìç Coordinates: {city_info['latitude']}, {city_info['longitude']}\n"
        )
        await message.answer(answer, reply_markup=kb.main_en)
    else:
        await message.answer("‚ùå City information not found.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "/–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
@router.message(F.text == "/–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_ru(message: Message):
    await message.answer("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.settings_ru)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "/Settings" –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
@router.message(F.text == "/Settings")
async def settings_en(message: Message):
    await message.answer("Settings menu. Choose an option:", reply_markup=kb.settings_en)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "/–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫" –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
@router.message(F.text == "/–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")
async def change_language_ru(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=kb.language_menu_ru)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "/Change Language" –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
@router.message(F.text == "/Change Language")
async def change_language_en(message: Message):
    await message.answer("Choose language:", reply_markup=kb.language_menu_en)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "/–†—É—Å—Å–∫–∏–π" –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
@router.message(F.text == "/–†—É—Å—Å–∫–∏–π")
async def set_language_russian(message: Message):
    user_languages[message.from_user.id] = "ru"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π.", reply_markup=kb.main_ru)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "/Russian" –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
@router.message(F.text == "/Russian")
async def set_language_russian_en(message: Message):
    user_languages[message.from_user.id] = "ru"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("Language changed to Russian.", reply_markup=kb.main_ru)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "/English" –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
@router.message(F.text == "/English")
async def set_language_english(message: Message):
    user_languages[message.from_user.id] = "en"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("Language changed to English.", reply_markup=kb.main_en)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "/–ù–∞–∑–∞–¥" –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
@router.message(F.text == "/–ù–∞–∑–∞–¥")
async def go_back_ru(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.main_ru)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "/Back" –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
@router.message(F.text == "/Back")
async def go_back_en(message: Message):
    await message.answer("You are back in the main menu.", reply_markup=kb.main_en)